#!/usr/bin/env python

# Sprite
#
# A script or creating sprites from your command line. Currently only
# supports fixed sized images, not vertical/horizontal repeats

import sys
import optparse
import math
import subprocess
import os

from PIL import Image

def usage():
    print 'Usage: sprite <image1.png image2.png ...> --image sprite.png --css sprite.css'

def error(msg):
    print 'ERROR: %s' % msg
    usage()
    sys.exit()

def split_path(input):
    '''Split a dictionary containing information about a path'''

    path, file = os.path.split(input)
    name, ext = os.path.splitext(file)
    return {
        'path': path,
        'file': file,
        'name': name,
        'ext': ext}

def build_sprite(inputs, output, css, prefix=None, resize=.6):

    if not prefix: prefix = ''

    output_name = os.path.join(prefix, split_path(output)['file'])

    sizes = [Image.open(image).size for image in inputs]
    styles = ''
    left = 0

    for input, size in zip(inputs, sizes):

        image = split_path(input)

        width = math.ceil(size[0] * resize)
        height = math.ceil(size[1] * resize)

        # The width-1 is a little hacky. Sometimes our sprites bleed so this
        # keeps it away from the edge. Something better should be used here.
        styles += "#%s_image { background: url('%s') -%dpx 0; width: %dpx; height: %dpx; }\n" % \
            (image['name'], output_name, left, width-1, height)

        left += width


    inputs = ' '.join(inputs)
    resize *= 100

    cmd = 'convert \( %s +append \) -resize %d%% -append %s' % (inputs, resize, output)

    p = subprocess.Popen(cmd, shell=True)

    with open(css, 'w') as file: file.write(styles)

    return True

if __name__ == '__main__':
    
    parser = optparse.OptionParser()

    parser.add_option('-i', '--image')
    parser.add_option('-c', '--css')
    parser.add_option('-p', '--prefix')

    opts, args = parser.parse_args()

    if not args: error('Please enter 1 or more images to create sprite')
    if not opts.image: error('Please enter an output image or the sprite')
    if not opts.css: error('Please enter an output css file')

    build_sprite(args, opts.image, opts.css, prefix=opts.prefix)
